<?php
/**
* ReadyScript (http://readyscript.ru)
*
* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)
* @license http://readyscript.ru/licenseAgreement/
*/
namespace Telegram\Model\Mode;

use Longman\TelegramBot\Commands\Command;
use Longman\TelegramBot\Request;
use RS\Application\Auth;
use RS\Exception;
use Telegram\Config\File;
use Telegram\Model\Commands\AbstractSystemCommand;
use Telegram\Model\Verification\Action\SignIn;
use Users\Model\Api;
use Users\Model\Verification\Provider\Email;
use Users\Model\Verification\Provider\Sms;
use Users\Model\Verification\VerificationEngine;

/**
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
class LoginMode extends AbstractMode
{
    const SUBMODE_ENTER_LOGIN = 'login';
    const SUBMODE_ENTER_PASSWORD = 'password';
    /**
     * @var Api
     */
    protected $user_api;

    /**
     * @var string
     */
    protected $login_placeholder;

    /**
     * @var File
     */
    protected $config;


    function __construct()
    {
        parent::__construct();
        $this->user_api = new Api();
        $this->login_placeholder = $this->user_api->getAuthLoginPlaceholder();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
     * @param AbstractSystemCommand $command
     *
     * @return void
     */
    public function onEnterMode($command)
    {
        $chat = $this->getTelegramChat();
        $chat['submode'] = self::SUBMODE_ENTER_LOGIN;
        $chat->addStateData(self::getId(), []);
        $chat->update();

        $profile = $chat->getProfile();
        $config = File::config($profile['site_id']);

        if (!$config['verify_providers']) {
            $chat->switchMode($command, new DefaultMode());
            $command->replyToChat(
                t('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞.')
            );
            return;
        }

        $user = $command->tg_user->getRsUser();
        if ($user['id']) {
            $command->replyToChat(
                t('%name, –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π %fields, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', [
                    'name' => $user['name'],
                    'fields' => $this->login_placeholder
                ])
            );
        } else {
            $command->replyToChat(t('–í–≤–µ–¥–∏—Ç–µ %fields –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.', [
                'fields' => $this->login_placeholder
            ]));
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     *
     * @param AbstractSystemCommand $command –û–±—ä–µ–∫—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¢–µ–ª–µ–≥—Ä–∞–º
     * @return \Longman\TelegramBot\Entities\ServerResponse|void
     * @throws Exception
     */
    public function onMessage($command)
    {
        $chat = $this->getTelegramChat();

        switch($chat['submode']) {
            case self::SUBMODE_ENTER_LOGIN:
                return $this->signIn($command);

            case self::SUBMODE_ENTER_PASSWORD:
                return $this->verify($command);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     *
     * @return string
     */
    protected function getChatSessionId()
    {
        $chat = $this->getTelegramChat();
        return 'TELEGRAM-CHAT-'.$chat['telegram_user_id'].'-'.$chat['chat_id'];
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Email, –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ª–æ–≥–∏–Ω. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
     * –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
     *
     * @param AbstractSystemCommand $command
     * @return \Longman\TelegramBot\Entities\ServerResponse
     */
    protected function signIn($command)
    {
        $message = $command->getMessage();
        $chat = $this->getTelegramChat();
        $login = $message->getText();

        if (!$login) {
            return $command->replyToChat(t('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º %placeholder', [
                'placeholder' => $this->login_placeholder
            ]));
        }

        $user = Auth::getUserByLogin($login);
        if (!$user) {
            return $command->replyToChat(t('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ %placeholder –µ—â–µ —Ä–∞–∑', [
                'placeholder' => $this->login_placeholder
            ]));
        }

        $profile = $chat->getProfile();
        $config = File::config($profile['site_id']);

        //–°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if ($user['e_mail'] != '' && in_array(Email::getId(), (array)$config['verify_providers'])) {
            $verification_provider = new Email();
        } elseif ($user['phone'] != '' && in_array(Sms::getId(), (array)$config['verify_providers'])) {
            $verification_provider = new Sms();
        } else {
            return $command->replyToChat(t('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π %placeholder', [
                'placeholder' => $this->login_placeholder
            ]));
        }

        $verify_engine = new VerificationEngine();
        $verify_engine->setAction(new SignIn());
        $verify_engine->setCreatorUserId($user['id']);
        $verify_engine->setVerificationProvider($verification_provider);
        if ($verification_provider instanceof Sms) {
            $verify_engine->setPhone($user['phone']);
        }
        $verify_engine->setSessionId($this->getChatSessionId());
        $verify_engine->initializeSession();
        $session = $verify_engine->getSession();

        if ($verify_engine->sendCode()) {
            if ($session['code_debug']) {
                $command->replyToChat(t('–í–∞—à –∫–æ–¥(–≤–∫–ª—é—á–µ–Ω DEMO-—Ä–µ–∂–∏–º): %code', [
                    'code' => $session['code_debug']
                ]));
            }

            //–ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            $chat['submode'] = self::SUBMODE_ENTER_PASSWORD;
            $chat->addStateData(self::getId(), [
                'verification_session_token' => $session['uniq']
            ]);
            $chat->update();
            return $command->replyToChat(t('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ %channel', [
                'channel' => $session->getVerificationProvider()->getTitle()
            ]));
        } else {
            return $command->replyToChat($verify_engine->getErrorsStr()."\n".t('–í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ %placeholder –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', [
                    'placeholder' => $this->login_placeholder
            ]));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ - –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param AbstractSystemCommand $command
     * @return \Longman\TelegramBot\Entities\ServerResponse
     */
    protected function verify($command)
    {
        $message = $command->getMessage();
        $chat = $this->getTelegramChat();
        $code = $message->getText();

        $state = $chat->getStateData(self::getId());
        $verification_session_token = $state['verification_session_token'] ?? '';

        $verify_engine = new VerificationEngine();
        $verify_engine->setSessionId($this->getChatSessionId());

        if (!$verification_session_token
            || !$verify_engine->initializeByToken($verification_session_token)) {

            $chat['submode'] = self::SUBMODE_ENTER_LOGIN;
            $chat->addStateData(self::getId(), []);
            $chat->update();

            return $command->replyToChat(
                t('–í–µ—Ä–æ—è—Ç–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏ %placeholder.', [
                    'placeholder' => $this->login_placeholder
                ])
            );
        }

        if ($verify_engine->checkCode($code)) {
            $session = $verify_engine->getSession();
            $user = $session->getCreatorUser();

            $command->tg_user['user_id'] = $user['id'];
            $command->tg_user->update();

            $command->replyToChat(
                t('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, %name! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ —Ä–µ–∂–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.', [
                    'name' => ucfirst($user['name'])
                ])
            );

            $chat->switchMode($command, new DefaultMode());
            return Request::emptyResponse();
        } else {
            return
                $command->replyToChat(
                    $verify_engine->getErrorsStr()
                );
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
     *
     * @return string
     */
    public static function getId()
    {
        return 'login';
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
     *
     * @return string
     */
    public static function getTitle()
    {
        return t('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
     * –¢.–µ. –µ—Å–ª–∏ –≤ —á–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞,
     * —Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã.
     *
     * @return array
     */
    public static function getTextCommands()
    {
        return [t('üîë –í—Ö–æ–¥')];
    }
}