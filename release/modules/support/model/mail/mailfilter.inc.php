<?php
/**
* ReadyScript (http://readyscript.ru)
*
* @copyright Copyright (c) ReadyScript lab. (http://readyscript.ru)
* @license http://readyscript.ru/licenseAgreement/
*/
namespace Support\Model\Mail;

use PhpImap\IncomingMail;

/**
 * Класс содержит различные инструменты для проверки на то,
 * является ли письмо автоматически сгенерированным.
 *
 * С помощью данного класса предотвращается циклическая загрузка новых тикетов
 * из-за ошибок доставки ответов
 */
class MailFilter
{
    /**
     * Возвращает true, если это письмо от человека, а не автоматический ответ какой-либо системы
     *
     * @param IncomingMail $email
     * @return bool
     */
    public static function isHumanMail(IncomingMail $email)
    {
        $headers = self::splitHeaders($email->headersRaw);
        return !self::isAutoReply($headers) && !self::isDeliveryInformation($headers);
    }

    /**
     * Преобразовывают строку с заголовками письма в массив Ключ => Значение
     *
     * @param string $headers
     * @return array
     */
    protected static function splitHeaders($headers)
    {
        $arr = preg_split('~([\w-]+: )~', $headers,-1,PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);

        for ($res = array(), $i = 0; $i < count($arr); $i+=2) {
            $key = strtr($arr[$i], [': ' => '']);
            $res[$key] = trim($arr[$i+1] ?? '');
        }

        return $res;
    }

    /**
     * Возвращает true,
     *
     * @param array $headers
     * @return bool
     */
    protected static function isAutoReply(array $headers)
    {
        $auto_headers = array(
            'Auto-Submitted'    => array('AUTO-REPLIED', 'AUTO-GENERATED'),
            'Precedence'        => array('AUTO_REPLY', 'BULK', 'JUNK', 'LIST'),
            'X-Precedence'      => array('AUTO_REPLY', 'BULK', 'JUNK', 'LIST'),
            'X-Autoreply'       => 'YES',
            'X-Auto-Response-Suppress' => array('ALL', 'DR', 'RN', 'NRN', 'OOF', 'AutoReply'),
            'X-Autoresponse'    => '*',
            'X-AutoReply-From'  => '*',
            'X-Autorespond'     => '*',
            'X-Mail-Autoreply'  => '*',
            'X-Autogenerated'   => 'REPLY',
            'X-AMAZON-MAIL-RELAY-TYPE' => 'NOTIFICATION',
        );

        foreach ($auto_headers as $header => $find) {
            if(!isset($headers[$header])) continue;

            $value = strtoupper($headers[$header]);
            if (is_array($find)) {
                foreach ($find as $f) {
                    if (strpos($value, $f) === 0) {
                        return true;
                    }
                }
            } elseif ($find === '*') {
                return true;
            } elseif (strpos($value, $find) === 0) {
                return true;
            }
        }

        return false;
    }

    /**
     * Возвращает true, если письмо является информацией о доставке
     *
     * @param $headers
     * @return bool
     */
    static function isDeliveryInformation($headers)
    {
        $bounce_headers = [
            'From'  => ['stripos', ['MAILER-DAEMON', '<>'], null, false],
            'Subject'   => ['stripos', ['DELIVERY FAILURE', 'DELIVERY STATUS', 'UNDELIVERABLE:', 'Undelivered Mail Returned'], 0],
            'Return-Path'   => ['strcmp', ['<>'], 0],
            'Content-Type'  => ['stripos', ['report-type=delivery-status'], null, false],
            'X-Failed-Recipients' => ['strpos', ['@'], null, false]
        ];

        foreach ($bounce_headers as $header => $find) {
            if(!isset($headers[$header])) {
                continue;
            }

            @list($func, $searches, $pos, $neg) = $find;
            if(!($value = $headers[$header]) || !is_array($searches)) {
                continue;
            }

            foreach ($searches as $f) {
                $result = call_user_func($func, $value, $f);
                if (($pos === null && $result !== $neg) or ($result === $pos)) {
                    return true;
                }
            }
        }

        return false;
    }
}